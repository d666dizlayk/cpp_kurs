#include <iostream>

using namespace std;

void BinarySort(int* array, int size, int& comps, int& swaps) {
    // Проверяем, является ли массив уже отсортированным
    bool sorted = true;
    for (int i = 1; i < size; i++) {
        comps++; // число сравнений
        if (array[i] < array[i - 1]) {
            sorted = false;
            break;
        }
    }

    if (sorted) {
        swaps = 0; // Если массив уже отсортирован, число перестановок равно 0
        return;
    }
    // Функция сортировки массива методом бинарной вставки
    for (int i = 1; i < size; i++) {
        int key = array[i]; // Текущий элемент, который нужно вставить в отсортированную часть массива
        int left = 0; // Левая граница отсортированной части массива
        int right = i - 1; // Правая граница отсортированной части массива

        // Ищем позицию для вставки текущего элемента в отсортированную часть массива
        while (left <= right) {
            int mid = (left + right) / 2; // Середина отсортированной части массива
            comps++;
            if (array[mid] > key) {
                right = mid - 1; // Если значение в середине больше текущего элемента, двигаем правую границу
            }
            else {
                left = mid + 1; // Если значение в середине меньше или равно текущему элементу, двигаем левую границу
            }
        }

        // Сдвигаем элементы вправо, чтобы освободить место для вставки текущего элемента
        for (int j = i - 1; j >= left; j--) {
            array[j + 1] = array[j];
            swaps++;
        }

        array[left] = key; // Вставляем текущий элемент на найденную позицию
        //swaps++;
    }
}


void printArray(const int* array, int size) {
    // Функция печати массива
    for (int i = 0; i < size; i++) {
        cout << array[i] << " "; // Выводим элементы массива через пробел
    }
    cout << endl; // Переходим на новую строку
}
